YourPersonalPhotographOrganiser
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

An attempt from me at creating a Photo gallery.

Thank you for your interest. I've done my best to create the longest name
for this project that at the same time did not contain the word Gallery in
any way. If you really feel like it, you can abbreviate it as YPPO.

TABLE OF CONTENTS
-----------------

- WHY
- REQUIREMENTS
- USE
- REST SERVICES
- CONTENTS
- REFERENCES

WHY
---

Given the fact that there are numerous other photo galleries, why should
you use this one?

1. it's very easy to comprehend and very simple
2. it uses the JDK 7 and JEE 7 (under Glassfish), if you wish to learn these two, here's
your chance
3. it has almost everything you need for home use, I do not recommend it for
website use.

REQUIREMENTS
------------

1. simple database, easy to make changes directly, if so required
2. used for home use
3. no authentication or authorization required
4. helps me to understand the jdk 7, glassfish and jee 7, by using
all the new stuff in there.
5. absolutely NO changing of the photographs, all changes are done
in java, in memory, in glassfish. *)
6. flexible in where these photographs are located (no need to keep them in
the webdir, for example)

*) I've had too many instances where:
1. changing files from webinterface is a security risk, and requires proper
access rights.
2. changing files causes the extra data present in the jpegs put there by
photocameras to be discarded
3. changing files potentially causes deterioration of the quality of the
jpegs
4. changing files has sometimes caused the file to be damaged in some way
5. changing files makes it impossible (or at the very least, extremely hard) 
to determine if the photo is already present in your collection

Some of the new stuff that is being used here:
JDK7 (Look for "JDK7" in the sourcecode)
1. multiple catch
2. try-with-resources
3. diamond-notation
4. filevisitor interface
5. Path class usage
JEE 7
1. no local interfaces on beans
2. EJBs inside the WAR, no longer is an EAR required

USE
---

Go to url http://localhost:8080/YourPersonalPhotographOrganiser/ to get started
Parameters:
id=id/number of gallery, 0 being the default if nothing is provided.

Go to url
http://localhost:8080/YourPersonalPhotographOrganiser/photo.jsp to get started
Parameters:
id=id/number of Photograph

BigImageServlet:
http://localhost:8080/YourPersonalPhotographOrganiser/ImageServlet
Parameters:
id=id/number of Photograph
size=thumb/medium/large/default

TestServlet
http://localhost:8080/YourPersonalPhotographOrganiser/TestServlet

HTTP operations:
GET - read
POST - create
PUT - edit
DELETE - delete

REST SERVICES
-------------

Gallery
http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleries
http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleries/{id}
http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleries/{id}/photographs
http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleries/{id}/galleries


http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleryphotographs
http://localhost:8080/YourPersonalPhotographOrganiser/resources/galleryphotographs/{id}/comments
http://localhost:8080/YourPersonalPhotographOrganiser/resources/photographs

Location
http://localhost:8080/YourPersonalPhotographOrganiser/resources/locations
http://localhost:8080/YourPersonalPhotographOrganiser/resources/locations/{id}
starts to discover extra pictures, or pictures that have been removed.
http://localhost:8080/YourPersonalPhotographOrganiser/resources/locations/{id}/discover

http://localhost:8080/YourPersonalPhotographOrganiser/resources/comments

Epected result would look a little like so:
Status Code: 200 OK
X-Powered-By: Servlet/3.0 JSP/2.2 (GlassFish Server Open Source Edition
3.1.1 Java/Oracle Corporation/1.7)
Server: GlassFish Serve rOepn Source Edition 34.1.1.
Content-Type: application/json
Transfer-Encoding: chunked
Date: Sat, 24 Dec 2011 17:19:55 GMT

CONTENTS
--------

build - the build products (class files, for instance)
DATABASE - description of the database, with sql scripts
nbproject - net beans settings.
src	 - java source files, empty as java source files are present in the war and ejb instead.
YourPersonalPhotographOrganiser - the web war
build.xml - make file
dist - contains files for deploying to the glassfish server
README - this file
rest - files used by the REST Client Firefox addon (for testing)

REFERENCES
----------

You can find some little more accessible info on 
http://randomthoughtsonjavaprogramming.blogspot.com

Icons at:
http://www.iconarchive.com/show/folder-icons-by-iconshock/gallery-icon.html
http://findicons.com/icons/gallery.png
http://icons-search.com/icons/movie.aspx

Fancybox javascript library at:
http://fancybox.net/support

JQuery framework at:
http://docs.jquery.com/Downloading_jQuery

Digital Photographs Library at:
http://code.google.com/p/metadata-extractor/ (http://www.drewnoakes.com/code/exif/)

jsTree library at:
http://www.jstree.com/

Logging library for javascript:
http://log4javascript.org/